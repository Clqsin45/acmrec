/*
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

#define N 88
#define M 140
#define INF 0x3f3f3f3f
#define T 420000
int kind[12] = {4, 2, 1, 4, 8, 4, 8, 4, 8, 4, 8, 8};
int row;
int gox[12][8][4] = {
    {   /******
             0          0      000         000
             0          0        0         0
             000      000        0         0
        ********
        {1,2,2,2},  {1,2,2,2}, {0,0,1,2}, {0,0,1,2}
    },
    {   /******
             00000    0
                      0
                      0
                      0
                      0           ********
           {0,0,0,0},{1,2,3,4}
    },
    {   /******
            0
           000
            0         ********
         {1, 1, 1, 2}
    },
    {   /******
        0 0       000       00      00
        000       0 0       0        0
                            00      00
        ********
       {0,1,1,1},{0,0,1,1},{0,1,2,2},{0,1,2,2}
    },
    {   /******
        0           00      0000        0
        0000        0          0        0
                    0                   0
                    0                  00
       ********
       {1,1,1,1}, {0,1,2,3},{0,0,0,1},{1,2,3,3},

       /******
                   00                   0
        0000        0          0        0
        0           0       0000        0
                    0                   00
       ********
       {0,0,0,1},{0,1,2,3},{1,1,1,1},{1,2,3,3}
    },
    {
    /******
        0           00      00         0
        00         00        00       00
         00        0          0      00

       *******
        {1,1,2,2},{0,1,1,2},{0,1,1,2},{1,1,2,2}
    },
    {/******
      0            0        0000        0          0        0       0000            0
     0000          00         0         0        0000       0        0             00
                   0                   00                   00                      0
                   0                    0                   0                       0
    ********
     {1,1,1,1},{1,1,2,3}, {0,0,0,1}, {1,2,2,3}, {1,1,1,1},{1,2,2,3},{0,0,0,1},{1,1,2,3}
    },
    {
    /******
        0       00          0          00
      000        0          000        0
      0          00           0       00
    ********
      {1,1,1,2},{0,1,2,2}, {1,1,1,2},{0,1,2,2}
    },
    {/******
          0      0          00       0           0        0      00      0
          00     000       00       000         00      000       00    000
         00       0         0         0          00      0        0     0
    ******** /
       {1,1,2,2},{1,1,1,2},{0,1,1,2},{1,1,1,2},{1,1,2,2},{1,1,1,2},{0,1,1,2},{1,1,1,2}
    },
    {/******
        0           000         0           0
        0            0        000           000
       000           0          0           0
    ******** /
        {1,2,2,2}, {0,0,1,2}, {1,1,1,2}, {1,1,1,2}
    },
    {/******
            00      0       000         00          00          0       000       00
           000      00      00          00          000        00        00       00
                    00                   0                     00                 0
    ***** /
        {0,1,1,1},{1,1,2,2},{0,0,1,1},{0,1,1,2},{0,1,1,1}, {1,1,2,2},{0,0,1,1},{0,1,1,2}
    },
    {/******
        000        0         00         0        000           0       00        0
       00          00      000          0          00         00        000      0
                    0                   00                    0                 00
                    0                    0                    0                 0
    ******* /
       {0,0,1,1},{1,1,2,3}, {0,1,1,1},{1,2,2,3},{0,0,1,1},{1,1,2,3}, {0,1,1,1},{1,2,2,3}
    }
};
int goy[12][8][4] = {
    {   /******
             0          0      000         000
             0          0        0         0
             000      000        0         0
        ******** /
        {0,0,1,2},  {0,-2,-1,0}, {1,2,2,2}, {1,2,0,0}
    },
    {   /******
             00000    0
                      0
                      0
                      0
                      0           ******** /
           {1,2,3,4},{0,0,0,0}
    },
    {   /******
            0
           000
            0         ******** /
         {-1,0,1,0}
    },
    {   /******
        0 0       000       00      00
        000       0 0       0        0
                            00      00
        ******** /
        {2,0,1,2},{1,2,0,2},{1,0,0,1},{1,1,0,1}
    },
    {   /******
        0           00      0000        0
        0000        0          0        0
                    0                   0
                    0                  00
       ******** /
       {0,1,2,3},{1,0,0,0},{1,2,3,3}, {0,0,-1,0},
       /******
                   00                   0
        0000        0          0        0
        0           0       0000        0
                    0                   00
       ******** /
       {1,2,3,0},{1,1,1,1},{-3,-2,-1,0},{0,0,0,1}
    },
    {
    /******
        0           00      00         0
        00         00        00       00
         00        0          0      00

       ******** /
        {0,1,1,2},{1,-1,0,-1},{1,1,2,2},{-1,0,-2,-1}
    },
    {/******
      0            0        0000        0          0        0       0000            0
     0000          00         0         0        0000       0        0             00
                   0                   00                   00                      0
                   0                    0                   0                       0
    ******** /
     {-1,0,1,2},{0,1,0,0},{1,2,3,2},{0,-1,0,0},{-2,-1,0,1},{0,0,1,0},{1,2,3,1},{-1,0,0,0}
    },
    {
    /******
        0       00          0          00
      000        0          000        0
      0          00           0       00
    ******** /
      {-2,-1,0,-2},{1,1,1,2},{0,1,2,2},{1,0,-1,0}
    },
    {/******
          0      0          00       0           0            0          00      0
          00     000       00       000         00          000           00    000
         00       0         0         0          00          0            0     0
    ******** /
       {0,1,-1,0},{0,1,2,1},{1,-1,0,0},{-1,0,1,1},{-1,0,0,1},{-2,-1,0,-1},{1,1,2,1},{-1,0,1,-1}
    },
    {/******
        0           000         0           0
        0            0        000           000
       000           0          0           0
    ******** /
        {0,-1,0,1},{1,2,1,1},{-2,-1,0,0},{0,1,2,0}
    },
    {/******
            00      0       000         00          00          0       000       00
           000      00      00          00          000        00        00       00
                    00                   0                     00                 0
    ***** /
        {1,-1,0,1},{0,1,0,1},{1,2,0,1},{1,0,1,1},{1,0,1,2},{-1,0,-1,0},{1,2,1,2},{1,0,1,0}
    },
    {/******
        000        0         00         0        000           0       00        0
       00          00      000          0          00         00        000      0
                    0                   00                    0                 00
                    0                    0                    0                 0
    ******** /
       {1,2,-1,0},{0,1,1,1},{1,-2,-1,0},{0,0,1,1},{1,2,2,3},{-1,0,-1,-1},{1,1,2,3},{0,-1,0,-1}
    }
};

int ans ;

struct DLX{
    int l[T], r[T], u[T], d[T];
    int col[T], cnt[N], head[T];

    int id, n;

    void init(int nt){
        this->n = nt;

        int i;
        for(i = 0; i <= n; i++){
            d[i] = u[i] = i;
            l[i] = i - 1; r[i] = i + 1;
        }
        l[0] = n; r[n] = 0;
        memset(cnt, 0, sizeof(cnt));
        memset(head, -1, sizeof(head));
        id=  n +1;
    }

    void add(int x, int y){
        u[id] = u[y]; d[id] = y;
        d[u[y]] = id; u[y] = id;

        if(head[x] == -1){
            head[x] = l[id] = r[id] = id;
        }
        else{
            r[id] = r[head[x]]; l[id] = head[x];
            l[r[id]] = id;  r[l[id]] = id;
            head[x] = id;
        }
        cnt[y] ++;  col[id] = y;
        id++;
    }

    void del(int x){
        int i, j;
        l[r[x]] = l[x]; r[l[x]] = r[x];
        for(i = d[x]; i != x; i = d[i]){

            for(j = r[i]; j != i; j = r[j]){
                cnt[col[j]] --;
                u[d[j]] = u[j]; d[u[j]] = d[j];
            }
        }
    }

    void resume(int x){
        int i, j;
        for(i = u[x]; i != x; i = u[i]){
            for(j = l[i]; j != i; j = l[j]){
                cnt[col[j]] ++;
                d[u[j]] = j;    u[d[j]] = j;
            }
        }
        l[r[x]] = x;    r[l[x]] = x;
    }

    void dfs(){
        if(r[0] == 0)   {
            ans++;  return;
        }
        int idx, temp, i, j;
        temp = INF;
        for(i = r[0]; i != 0; i = r[i]){
            if(cnt[i] < temp){
                temp = cnt[i];
                idx = i;
            }
        }
        if(temp == 0) return;
        del(idx);
        for(i = d[idx]; i != idx; i = d[i]){
            for(j = r[i]; j != i; j = r[j]){
                del(col[j]);
            }
            dfs();
            for(j = l[i]; j != i; j = l[j]){
                resume(col[j]);
            }
        }
        resume(idx);
    }
}dlx;


int n, m;
void color(int domi, int ang, int x, int y){

    int i, j, xx, yy;
    for(i = 0; i < 4; i++){
        xx = x + gox[domi][ang][i];
        yy = y + goy[domi][ang][i];
        if(xx < 1 || xx > n || yy < 1 || yy > m) return;
    }
    dlx.add(++row, domi+1);
    dlx.add(row, m*(x-1)+y+12);
    for(i = 0; i < 4; i++){
        xx = x + gox[domi][ang][i];
        yy = y + goy[domi][ang][i];
         dlx.add(row, m*(xx-1)+yy+12);
    }
}


int dabiao[10];
int main(void){
//freopen("in", "r", stdin);
    int x,y,j, i;
    char map[20][20];
    /*
    while(scanf("%d", &n)){
        for(i = 0; i < kind[n]; i++){
            memset(map, 1, sizeof(map));
            map[1][10] = '*';
            for(j = 0; j < 4; j++){
                x = 1 + gox[n][i][j];
                y = 10 + goy[n][i][j];
                map[x][y] = '*';
            }
            for(j = 1; j <= 5; j++){
                for(int k = 5; k <= 15; k++){
                    printf("%c",map[j][k]);
                }
                printf("\n");
            }
            printf("\n");
        }
    }* /
    for(n = 1; n <=6; n ++){

   // while(scanf("%d", &n) != EOF){
        m = 60/n;
        ans = 0;    row = 0;
        dlx.init(72);
        for(i = 0; i < 12; i++){
            for(j = 0; j < kind[i]; j++){
                for(x=1; x <= n; x++){
                    for(y = 1; y <= m; y++){
                            color(i,j,x,y);
                    }
                }
            }
        }



        dlx.dfs();
        dabiao[i] = ans;
        printf("%d %d\n",n, ans / 4);
    }

    return 0;

}
*/

#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

int ans[10] = {0, 0, 0, 2, 368, 1010, 2339};
int main(){
    int n, m;
    while(cin>>n>>m){
        if( n > m) swap(n, m);
        cout<<ans[n]<<endl;
    }
    return 0;
}
